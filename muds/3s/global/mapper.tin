#class {mapper} {open}

#map read ${mapfile}

#var map[height] 17
#var map[width] 42

#map goto {roomnote} {home}

/* Move Event */
#alias {mapupdate} {
	#map {get} {ROOMVNUM} {roomvnum};
	#map {get} {ROOMAREA} {roomarea};
	#map {get} {ROOMNAME} {roomname};
	#map {get} {ROOMDESC} {roomdesc};
	#format {roomname_len}	{%L} {$roomname};
	#format {roomvnum_len}	{%L} {$roomvnum};
	#format {roomarea_len}	{%L} {$roomarea};
	#format {roomdesc_len}	{%L} {$roomdesc};
	#math {name_len} {42-$roomvnum_len-3};
	#format {name_trunc} {%.${name_len}s} {$roomname};
	#unvar area_mapped;
	#map list {} {} {} {$roomarea} {variable} {area_mapped};
	#var {room_cnt} {&area_mapped[]};
	#if {"$draw[map]" == "on"} {
		#draw {tile} $map[height]-1 -$map[width] $map[height]-1 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
		#draw {tile} $map[height] -$map[width] $map[height] -1 {<140>[<030>$roomvnum<140>] <130>$name_trunc<099>}
	}
}

#event {MAP UPDATED VTMAP} {
	#delay {0.05} {mapupdate}
}

#event {MAP ENTER ROOM} {
	#map get roomvnum roomvnum;
	#system {echo "#map goto $roomvnum" > ${charpath}/lastroom.tt};
	#if {"$mapping" == "on"} {
		mapupdate
	};
	#if {"$draw[exitpanel]" == "on"}{
		show_exits;
	};
}

#event {MAP EXIT ROOM} {
	#list nouns clear
}

/* Map Follow on Following Others */
#act {%1 leaves %2\.} {
	#var following %1;
	#var foldir %2;

	#switch {"$foldir"} {
		#case {"north"}	{#var foldir n};
		#case {"south"}	{#var foldir s};
		#case {"east"}	{#var foldir e};
		#case {"west"}	{#var foldir w};
		#case {"down"}	{#var foldir d};
		#case {"up"}	{#var foldir u};
	}
}

#act {%1 leaves following %2} {
	#format {follower} {%l} {%1};
	#if {"$follower" == "$world" && %2 == "$following"} {
		#map move $foldir
	}
} {4}

#var longcap off;

#function cartcheck {
	#format cart {%.20s} {%0};
	#if {"$cart" == "                    " || "$cart" == ""} {
		#return 1;
	} {
		#return 0;
	};
};

#act {%*=I=%*}{#regex {%2}{%*cask of chaotic energy%*}{#map set roomnote seacask;#map set roomsymbol c;#map set roomcolor <158>;#bell;}};

#NOP Kill-Loop to find rooms with critters and no people

#NOP Room Short with Exits
#act {{=S=(.*) \((.*)\)\s*=S=}} {
	#var room %2;
	#var exits %3;
	#if {"$mapping" == "on"} {
		#replace exits {,} {;};
		#foreach {$exits} {eachexit} {
			#if {("%2" == "Sewer Portal" && "$area" == "Chaotic Sewers") || ("$area" == "The Sea of Chaos" && "$eachexit" == "out") || ("$area" == "The Sea of Chaos" && "$eachexit" == "u")}{
				#echo {Excluding a: $eachexit};
				#continue;
			}{
				#map dig $eachexit;
			};
		};
		#map get {roomexit} {rexit};
		#foreach {$rexit} {eachexit} {
			#if {("%2" == "Sewer Portal" && "$area" == "Chaotic Sewers")  || ("$area" == "The Sea of Chaos" && "$eachexit" == "out") || ("$area" == "The Sea of Chaos" && "$eachexit" == "u")}{
				#echo {Excluding b: $eachexit};
				#continue;
			}{
				#map at {$eachexit} {
					#map get {roomarea} {eacharea};
					#map get {roomvnum} {eachroom};
					#if {"$eacharea" == ""} {
						#map set {roomcolor} {<118>};
						#list {unexplored}{find}{$eachroom}{explored_index};
						#if {$explored_index == 0}{
							#list {unexplored} ins -1 {$eachroom};
							#if {$stepignore == 3}{
								go_unexplored;
							};
						};
					};
				};
			};
		};
		#if {$roomname_len == 0} {
			#map set roomname {%2 (%3)};
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor;
			#list {unexplored}{find}{$roomvnum}{explored_index};
			#if {$explored_index > 0}{
				#list {unexplored}{del}{$explored_index};
			};
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#delay 0 mapupdate
	};
	#nop {Automagic Kill Path Generation Begins Here};
	#var total_items 0;
	#var player_room 0;
	#var critter_room 0;
	#unvar critter_array;
	#var room_dirs %3;
	#replace {room_dirs}{,}{;};
	#var {room_short_desc}{%1};
	#regex {$room_short_desc}{=S=%* (%*)}{
		#var {room_short_desc}{&1};
	};
	#list {room_dirs}{create}{$room_dirs};
	#list {room_dirs}{find}{u}{upexit};
	#if {$upexit == 0}{
			#list {room_dirs}{find}{exit}{upexit};
	};
	#if {$upexit == 0}{
			#list {room_dirs}{find}{portal}{upexit};
	};
	#if {$upexit == 0}{
			#list {room_dirs}{find}{menu}{upexit};
	};
	#if {("%2" == "Sewer Portal" && "$area" == "Chaotic Sewers")}{
			#map set roomnote sewerexit;#map set roomsymbol x;#map set roomcolor <128>;
	};
	#list {room_dirs}{find}{$reversedir}{reverse_dir};
	#list {room_dirs}{size}{room_exits};
	#if {$stepper2 == 1}{
		#if {${domove2} == 1}{
			#if {"$mapping" == "on"}{
				#delay {0.15}{kill-loop};
			}{
				#if {$autoqueue == 1}{
					#if {$room_index <= $area_size}{
						#delay {0.05}{kill-loop};
					}{
						#math {targetarea}{${areaselector[current]} +1};
						#if {$targetarea > $queue_size}{#var {targetarea}{1}};
						#var {do_queue2}{1};
						#delay {0.15}{next_area_function};
					};
				}{
					#delay {0.05}{kill-loop};
				};
			};
		};
	}{
		#if {${domove2} == 1}{
			dir_selection;
		};
	};
	#nop {End of Magic Stepper};
}

#NOP Room Short with No Exits, Lowered Priority
#act {=S=%1%s=S=} {
	#var room %1;
	#if {"$mapping" == "on"} {
		#if {$roomname_len == 0} {
			#map set roomname {%1}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
					#nop
				} {
					#var long {${long}%%1 }
				}
			} {2}
		};
		#map get {roomvnum} {gonum};
		#map goto $gonum;
	};
} {6}

#act {=X={.*}} {
	#var total_items 0;
	#var player_room 0;
	#var critter_room 0;
	#unvar {critter_array};
	#if {"$longcap" == "on"} {
		#var longcap off;
		#unact {%%1};
		#map set roomdesc {$long}
	}
} {1}


/* Aliases */

#alias {area_mapped} {
	#unvar area_mapped;
	#map list {} {} {} {%1} {variable} {area_mapped};
	#showme {&area_mapped[] rooms mapped.};
};

#alias {nocolor}{
	#loop 1 20000 {cnt} {
		#map at {$cnt} {
			#map get {roomarea} {cntarea};
			#if {"$cntarea" == ""} {#map set roomcolor <118>}
		}
	};
	#map get {roomvnum} {gonum};
	#map goto $gonum;
	#draw {tile} 16 -42 16 -1 {<020>$roomarea <140>(<120>$room_cnt<140>)<099>};
	#draw {tile} 17 -42 17 -1 {<140>[<030>$roomvnum<140>] <130>$roomname<099>}
};

#var {saferoom}{cot};

#alias {go} {
	#if {"$mapping" == "on"}{
		mapoff;
	};
	#if {"${blacklist}" != ""}{
		#unvar {blacklist};
	};
	#if {"${critter[blacklist]}" != ""}{
		#unvar {critter[blacklist]};
	};
	#if {"${whitelist}" != ""}{
		#unvar {whitelist};
	};
	#if {"${unexplored}" != ""}{
		#unvar {unexplored};
	};
	#if {"${critter[whitelist]}" != ""}{
		#unvar {critter[whitelist]};
	};
     #map flag static on;
    #var domove2 0;
	#map find {roomnote} {%0%*};
    #map get roomvnum returnroom;
    #var returnpathroom $room_num;
	#path run;
	#var {return_room_index}{${room_index}};
	#var {path_index}{0};
	#var {room_index}{0};
	#var {room_num}{0};
	#map get {roomarea}{area};
	#if {"$area" != ""}{
		#var {saferoom}{%0};
		make_roomlist {${area}};
		show_area_selector;
	}{
		rating;
	};
	#if {"$draw[selector]" == "on" && "$draw[canvas]" == "on}{
		show_area_selector;
	};
}

#alias {panic}{
	go {$saferoom};
};

#alias goback {
    #map run $returnroom;
    #var {room_num}{$returnpathroom};
    #var {do_return}{1};
	#map get {roomarea}{area};
	#if {"$area" != ""}{
		make_roomlist {${area}};
	}{
		rating;
	};
	#if {"$draw[selector]" == "on" && "$draw[canvas]" == "on"}{
		show_area_selector;
	};
}

#alias {mapgo} {
	#map goto {roomnote} {%0};
}

#alias {start} {
	#map destroy world;
	#map read ${mapfile};
	#map goto {roomnote} {%0};
	#map offset 1 -42 17 -1
}

#alias {findhere} {
	#if {"$room" == ""} {
		look
	};
	#map list {roomarea} {$area} {roomname} {$room%*};
	#map list {roomarea} {$area} {roomname} {$room%*} {variable} {findroom};
	#if {&findroom[] == 1} {
		#list {foundroom} {create} {$findroom};
		#map goto $foundroom[1]
	}
}


#alias {mapsearch} {
	#show <129>Name matches:<088>;
	#map list {%i%*%0%*};
	#show \n;
	#show <129>Note matches:<088>;
	#map list {} {} {} {} {%i%*%0%*};
}

#alias {notelist} {
    #unvar {notes};
    #if {"%1" != ""}{
	#map list {roomnote}{%i%*%0%*}{variable}{noterooms};
    }{
    	#map list {roomnote} {{\w+}} {variable} {noterooms};
    };
   #foreach {*noterooms[]} {room} {#map get {roomnote} {notes[$room]} {$room}};
   #var notes
}

#alias {mapname %1} {
	#map name %1;
	#map write .tt/map/${mapfile}
}

#alias {mmu}{
	#map run {%0};
	#map set {roomnote} {%0};
	#map set {roomname} {%0};
	#map write .tt/map/${mapfile};
};

#alias {mapsave} {
	#if {$stepignore > 0}{
		#echo {It's likely that you don't want to save.  Turn off the Magic Mapper and save again};
	}{
		#map write ${mapfile}
	};
}

#alias {mapon} {
	!brief off yes;
	#map flag static off;
	#var mapstatic 1;
	#var area %1;
	#var mapping on;
	!rating;
}

#alias {mapoff}{
	#nop {!brief on yes;};
	!brief on full;
	#map flag static on;
	#unvar mapstatic;
	#unvar mapping;
}
#map flag static on
#unvar mapstatic

#alias {ma} {#map set roomarea {$area}}

#NOP Search Room Nouns (built by MIP)
#alias {sn} {
	#var noun_cnt &nouns[];
	#loop 1 &nouns[] cnt {
		exa $nouns[$cnt];
		search $nouns[$cnt]
	};
	#delay 0.5 {
		#if {$noun_cnt < &nouns[]} {
			#echo {<128>New items found!  Search again!<088>}
		}
	}
}

/* Screen Sizing */
#event {SCREEN RESIZE} {
	#read ${globalpath}/draw.tin
}

/* Transports */

#NOP ** MARK SOMETHING GREEN **
#alias mark {#map set roomcolor <128>};

/* Blocked Exits */
#act {^You cannot go } {
	#if {$mapstatic} {
		#map undo
	}
}
#act {^You cannot get it up.} {
	#if {$mapstatic} {
		#map undo
	}
}

#NOP ** GUILDS **
#NOP Juggernauts
#act {^The room is locked.} {#map undo}
#act {^Dirk says: This area is for Wolves not } {#map undo}
#act {^Harlow says: You are not allowed here please turn around and leave at once} {#map undo}
#act {^Only members of clan jade falcon can go this way.} {#map undo}

#NOP Bards
#act {^You can't go there!} {#map undo}

#NOP ** AREAS **
#NOP Abbey
#act {^A feeling of fear and dread washes over you, preventing you from going} {#map undo}
#act {^A feeling of dread washes over you, preventing you from going any further east.} {#map undo}

#NOP Body Mansion
#act {^You bump into a locked door.} {#map undo}

#NOP Chaos Cinemaplex
#act {^The movie usher asks for your movie ticket. When you fail to come up with} {#map undo}

#NOP Cove of the Three (Lost Soul)
#act {^A magical force pushes you back, and you hear a voice} {#map undo}

#NOP Crystal Stairway
#act {^The Warrior will not let you invade her home any further.} {#map undo}
#act {^The warrior will not let you pass.} {#map undo}

#NOP Detroit
#act {^Officer yells: Get him, he must be stealing something!!!!} {#map undo}

#NOP Dragon Realms
#act {^You cannot get past the dragon guards.} {#map undo}

#NOP Fallout Shelter
#act {^Core Guard jumps in your way, blocking your path!} {#map undo}

#NOP Ice Fishing
#act {^You are unable to climb the bank here.  It is very steep, and with all} {#map undo}
#act {^You can't go through a solid wall.  Try going around the shack, and} {#map undo}

#NOP Ice Mountains (Verbeeg)
#act {^The magical barrier is impenetrable.$} {#map undo}
#act {^The cryohydra snaps one of its heads at you as you try and approach} {#map undo}

#NOP Land
#act {^You are caught like a fly in a spider web, burning and twisting as} {#map undo}

#NOP Mage Tower
#act {^The guard blocks your passage.} {#map undo}

#NOP Night of Colour
#act {^Impediment slaps you back, thorns tearing.} {#map undo};
#act {^Serrated sword extended, Bulwark stops your progress.} {#map undo};

#NOP Rabbit Fields
#act {^The rabbit prevents you from going that way.} {#map undo}

#NOP Ravenloft
#act {^You try to go down, but suddenly feel more terrified than} {#map undo}
#act {^The trees move together and bar your path!} {#map undo}
#act {^A deathly chill blows from the south, blasting into Inix!} {#map undo}

#NOP Rocky Hill
#act {^Waving their rusty scimitars and growling loudly, the jackalmen} {#map undo}

#NOP Simpsons
#act {^   The Guard stops you and says: Aww no...you can't go in there.} {#map undo}

#NOP SolChem
#act {^The gang member shoves you back.} {#map undo}

#NOP Theatre of Souls
#act {^A closed door blocks your way.} {#map undo}

#NOP Underdark
#act {^The {drow|guard} prevents you from going that way.} {#map undo}
#act {^The troll will not let you pass.} {#map undo}

/* Allow clicking on a room to get map info */
#event {MAP SHORT-CLICKED MOUSE BUTTON ONE} {
    lfr {%0};
};
#alias lr {
    #if {"%1" == ""} {
        #map get;
    } {
        #if {%2 || %2 == 0} {
            #map jump %1 %2 %3;
            #map get;
            #map undo;
        } {
            #map at {%1} #map get;
        };
    };
};
#alias lfr {
    #if {"%1" == ""} {
        #map info;
    } {
        #if {%2 || %2 == 0} {
            #map jump %1 %2 %3;
            #map info;
            #map undo;
        } {
            #map at {%1} #map info;
        };
    };
};

#alias room_cleanup {
	#echo {Finding orphaned rooms...};
	#config {log mode} {plain};
	#system {rm splatrooms.txt};
    #unvar {valid_rooms};

	#NOP Get a list of all legitimate rooms (avoid gaps from previously deleted vnums);
	#NOP Skip room 1, as that the is map start point;
    #loop {2} {6635} {count} {
        #map goto {${count}};
		#map get roomvnum current_id;
        #if {$current_id == $count} {
            #list valid_rooms ins -1 $count;
        };
    };

    #loop {1} {&valid_rooms[]} {room} {
		#path destroy;
		#var path_length 0;
		#NOP #map at {$valid_rooms[+$room]} {#map get roomflags flags};

		#NOP First check if we can get from CoT _to_ the room;
		#map goto $valid_rooms[+$room];
		#line quiet #map find 1;
		#line quiet #path save length path_length;

		#NOP If that fails, check to see if we can get to CoT from it;
		#NOP (Eliminates void rooms from being caught, and finds mobile areas in Chaos);
		#if {$path_length == 0} {
			#map goto 1;
        	#line quiet #map find $valid_rooms[+$room];
			#line quiet #path save length path_length;
		};

		#if {$path_length == 0 && $flags == 0} {
			#line log splatrooms.txt $valid_rooms[+$room];
			#map leave;
			#map delete $valid_rooms[+$room];
		};
    };
	#echo {Cleanup complete!};
};
#class {mapper} {close}
