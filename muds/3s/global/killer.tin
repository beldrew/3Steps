#class {killer}{open}

#alias {reset_killer_once}{
	#var domove 0;
	#var critter_room 0;
	#var player_room 0;
	#var starter 0;
	#var stepper 0;
	#var reversedir s;
	#var reverse_dir 0;
	#var findexit 0;
	#var area_aggro 0;
	#var automap 0;
	#var autogather 0;
	#var autokill 0;
	#var autoqueue 0;
	#var killer_reset 1;
};

#if {$killer_reset != 1}{
	reset_killer_once;
};

#nop {A Couple helpful aliases}
#alias {kk}{kill $kstr};
#alias {bl}{
	#list {global[blacklist]} ins -1 {%0};
	#list {global[blacklist]}{size}{global_blacklist_size};
};

#nop {Make a global blacklist of critters to not stop on since they are followers, etc};

#var {global_blacklist}{everybody;under the control of;betrayer;broodling;chromatic cuckoo owlet;tiny translucent;gemini;a small wandering spider}

#alias {make_global_blacklist}{
	#list {global[blacklist]}{create}{$global_blacklist};
	#list {global[blacklist]}{size}{global_blacklist_size};
};

make_global_blacklist

#var {areaselector[rows]}{6}
#var {areaselector[page]}{1};
#var {areaselector[max]}{6};

#NOP Added for all the bots in the room.
#alias {autok}{
	#if {$autokill == 1}{
		#var autokill 0;
		#echo {Not Auto-attacking};
		show_area_selector;
	}{
		#var autokill 1;
		#echo {Auto-attacking};
		show_area_selector;
	};
};

#alias {.stop} {
	#var bot 0;
	#var autokill 0;
	#showme Bot Deactivated;
	update_status;
}
#NOP Should only be called after already in the area to step through
#alias {.start} {
	#var bot 1;
	#var autokill 1;
	#showme Bot Activated;
	update_status;
	#var resumebot 1;
}

#alias {.resume} {
	#if {$bot} {
		#var autokill 1;
		#showme Bot: Resuming;
		ki;
	} {
		#showme Bot currently deactivated;
	};
	update_status;
}

#alias {.pause} {
	#if {$bot} {
		#var autokill 0;
		#showme Bot: Paused;
	} {
		#showme Bot currently deactivated;
	};
	update_status;
};

#var {areaselector[rows]}{6}
#var {areaselector[page]}{1};
#var {areaselector[max]}{6};

#math selector[top] $exitpanel[bottom]+1;
#math selector[bottom] $selector[top]+$selector[height];
#alias {show_area_selector}{
	#if {"$draw[selector]" == "on" && "$draw[canvas]" == "on"}{
		#screen clear square $selector[top] -42 $selector[bottom] -1;
		#draw rounded box $selector[top] -41 $selector[bottom] -3;
		#showme {[<<]-[Area Selector]-[>>]} $selector[top] -33;
		#NOP #showme {<128>[<099>Area Selector<128>]<099>} $selector[top] -39;
		#NOP #showme {<128>[<099><<<128>][<099>>><128>]<099>} $selector[top] -12;
		#button {$selector[top];-33;$selector[top];-29}{
			#math {targetarea}{${areaselector[current]} - 1};
			#if {$targetarea < 1}{#var targetarea ${queue_size}};
			go ${areaselector[roomnote][${targetarea}]};
		};
		#button {$selector[top];-14;$selector[top];-11}{
			#math {targetarea}{${areaselector[current]} + 1};
			#if {$targetarea > ${queue_size}}{#var targetarea 1};
			go ${areaselector[roomnote][${targetarea}]};
		};
		#switch {$stepignore}{
			#case {0}{
				#showme {[<128>S<088>]} $selector[top] -36;
				#showme {[<128>STEPPR<088>]} $selector[top]+1 -38;
			};
			#case {1}{
				#showme {[<128>K<088>]} $selector[top] -36;
				#showme {[<128>MANUAL<088>]} $selector[top]+1 -38;
			};
			#case {2}{
				#showme {[<128>W<088>]} $selector[top] -36;
				#showme {[<128>WANDER<088>]} $selector[top]+1 -38;
			};
			#case {3}{
				#showme {[<128>M<088>]} $selector[top] -36;
				#showme {[<128>MAPPER<088>]} $selector[top]+1 -38;
			};
		};
		#button {$selector[top];-36;$selector[top];-33}{si};
		#if {${autoqueue} == 1}{
			#showme {[<128>Q<088>]} $selector[top] -7;
		}{
			#showme {[<faa>Q<088>]} $selector[top] -7;
		};
		#button {$selector[top];-7;$selector[top];-5}{autoq};
		#showme {[<128>GO<088>]} $selector[top]+1 -29;
		#button {$selector[top]+1;-29;$selector[top]+1;-26}{ki};
		#showme {[<128>KK<088>]} $selector[top]+1 -18;
		#button {$selector[top]+1;-18;$selector[top]+1;-13}{kk};
		#if {${autokill} == 1}{
			#showme {[<128>A<088>]} $selector[top]+1 -7;
		}{
			#showme {[<faa>M<088>]} $selector[top]+1 -7;
		};
		#button {$selector[top]+1;-7;$selector[top]+1;-5}{autok};
		#math {areaselector[start]}{${areaselector[rows]} * ${areaselector[page]}};
		#math {areaselector[end]}{${areaselector[rows]} * ${areaselector[page]} - ${areaselector[rows]} + 1};
		#line sub {var} #draw {tile} $selector[top]+2 -35 $selector[bottom]-1 -4 ${areaselector[text][-$areaselector[start]..-$areaselector[end]]};
		#var {start_row}{$selector[top]+1};
		#var {areaselector[current]}{0};
		#if {$queue_size > 0}{
			#loop {1}{${queue_size}}{queue_count}{
				#math {indicator}{$start_row + $queue_count};
				#showme {${queue_count}.} ${indicator} -38;
				#if {"${area}" == "${areaselector[roomarea][${queue_count}]}"}{
					#showme {<abe>><099>} ${indicator} -40;
					#var {areaselector[current]}{${queue_count}};
				};
			};
		};
		#button {$selector[top]+2;-36;$selector[top]+2;-5}{
			fbrm 1;
			show_area_selector;
		};
		#button {$selector[top]+3;-36;$selector[top]+3;-5}{
			fbrm 2;
			show_area_selector;
		};
		#button {$selector[top]+4;-36;$selector[top]+4;-5}{
			fbrm 3;
			show_area_selector;
		};
		#button {$selector[top]+5;-36;$selector[top]+5;-5}{
			fbrm 4;
			show_area_selector;
		};
		#button {$selector[top]+6;-36;$selector[top]+6;-5}{
			fbrm 5;
			show_area_selector;
		};
		#button {$selector[top]+7;-36;$selector[top]+7;-5}{
			fbrm 6;
			show_area_selector;
		};
	};
};


#alias {fbq}{
	#unvar notes;
	#unvar newarea;
	#var {name_len}{16};
	#var {note_len}{8};
	#if {"%1" != ""}{
		#map list {roomnote}{%i%*%0%*}{variable}{noterooms};
		#foreach {*noterooms[]}{room}{
			#map get {roomnote}{notes[$room]}{$room};
			#map get {roomarea}{newarea[$room]}{$room};
		};
		#format {note_trunc}{%-${note_len}s}{${notes[${room}]}};
		#format {note_trunc}{%.${note_len}s}{${note_trunc}};
		#format {name_trunc}{%-${name_len}s}{${newarea[${room}]}};
		#format {name_trunc}{%.${name_len}s}{${name_trunc}};
		#if {&areaselector[text][] >= ${areaselector[max]}}{
			#list areaselector[text] del 1;
			#list areaselector[roomarea] del 1;
			#list areaselector[roomnote] del 1;
		};
		#list {areaselector[text]}{size}{queue_size};
		#math {queue_size}{$queue_size + 1};
		#list areaselector[text] ins -1 {${note_trunc} | ${name_trunc} \[<faa>-<088>\]};
		#list areaselector[roomarea] ins -1 {${newarea[${room}]}};
		#list areaselector[roomnote] ins -1 {${notes[${room}]}};
		show_area_selector;
	}{
		#var {areaselector[text]};
	};
};

#alias {fb_default}{
	fbq donuts;
	fbq uo1;
	fbq ccows;
	fbq d2hell;
	fbq aegisl1;
	fbq acidloths;
};

#alias {fbrm}{
	#list areaselector[text] del %0;
	#list areaselector[roomarea] del %0;
	#list areaselector[roomnote] del %0;
	#list {areaselector[text]}{size}{queue_size};
	show_area_selector;
};

#alias {fbnext}{
	#math {targetarea}{${areaselector[current]} + 1};
	#if {$targetarea > ${queue_size}}{#var targetarea 1};
	go ${areaselector[roomnote][${targetarea}]};
};

#alias {fbprev}{
	#math {targetarea}{${areaselector[current]} - 1};
	#if {$targetarea < 1}{#var targetarea ${queue_size}};
	go ${areaselector[roomnote][${targetarea}]};
};


#alias {si}{
	#switch {$stepignore}{
		#case {0}{
			#echo {Using Manual Stepper};
			#var {manual_stepper}{1};
			#var {stepignore}{1};
		};
		#case {1}{
			#echo {Using Magic Wanderer};
			#var {manual_stepper}{0};
			#var {stepignore}{2};
		};
		#case {2}{
			#echo {Using Magic Mapper};
			#var {manual_stepper}{0};
			#var {stepignore}{3};
			mapon;
			!look;
		};
		#case {3}{
			#echo {Using Magic Stepper};
			#var {manual_stepper}{0};
			#var {stepignore}{0};
			mapoff;
		};
	};
	show_area_selector;
};

#act {AREA NAME: %1 [%2]} {
	#var {area}{%1};
	#map get {roomarea}{my_area};
	#if {"$my_area" != ""}{
		#var {area}{$my_area};
	};
	make_roomlist {$area};
	#if {$do_queue2 == 1}{
		#var do_queue2 0;
		ki;
	};
	show_area_selector;
}

#act {AREA RATING -> %1 [%2]}{
	#var {area}{%2};
	#map get {roomarea}{my_area};
	#if {"$my_area" != ""}{
		#var {area}{$my_area};
	};
	make_roomlist {$area};
	#if {$do_queue2 == 1}{
		#var do_queue2 0;
		ki;
	};
	show_area_selector;
}

#alias {make_killpath}{
	#line quiet #map {find}{%0};
	#var {tempavoid} {0};
	#if {$stepignore == 0}{
		#line quiet #map {at}{%0}{
			#map {get}{roomflag}{tempavoid};
		};
	};
	#if {$tempavoid != 1}{
		#unvar {kill_path2};
		#list {kill_path2}{clear};
		#line quiet #path {save}{forward}{kill_path2};
		#list {kill_path2}{create}{$kill_path2};
		#list {kill_path2}{size}{path_size};
		#list {unexplored}{size}{unexplored_rooms};
		#var {path_index}{1};
	}{
		#math {room_index}{$room_index + 1};
		make_killpath ${roomlist[${room_index}]};
	};
};

#alias {make_roomlist}{
	#map list {roomarea}{%0}{variable}{my_roomlist};
	#list {roomlist}{create}{*my_roomlist[]};
	#list {roomlist}{size}{area_size};
	#if {$area_size > 1}{
		#if {$do_return == 1}{
			#var {room_index}{$return_room_index};
			#var {do_return}{0};
		}{
			#var {room_index}{1};
		};
		#if {${roomvnum} == ${roomlist[${room_index}]}}{
			#math {room_index}{$room_index + 1};
		};
		make_killpath ${roomlist[${room_index}]};
		#unvar my_roomlist;
	};
	#if {"$blacklist" != ""}{
		#list {critter[blacklist]}{create}{$blacklist};
		#list {critter[blacklist]}{size}{blacklist_size};
	};
	#if {"${whitelist}" != ""}{
		#list {critter[whitelist]}{create}{$whitelist};
		#list {critter[whitelist]}{size}{whitelist_size};
	};
}


#alias {steptest}{
        #if {$manual_stepper == 1}{
                #math {room_num}{$room_num + 1};
                $kill_path[$room_num];
                #map map;
                #showme {You are on Room $room_num};
        	};
}

#act {You bounce right off the gelatinous wall.}{
	#map undo;
	#var {desired_dir}{s};
	dirfunction {$desired_dir};
}

#act {Too heavy.}{
	#var domove2 0;
}

#act {%1 is too heavy for Ventra's secret chest}{
	#var domove2 0;
}

#alias {mysearch}{
	#var {searchstring}{%0};
	#echo {Searching for $searchstring};
}

#alias {process_critter}{
	#list {critter_array} ins -1 %0;
	#var {critter_short_desc}{$tkstr};
	#if {"$searchstring" != ""}{
		#list {critter_array}{find}{%*${searchstring}%*}{found_index};
		#if {$found_index > 0}{
			#bell;
			#bell;
			#map get {roomvnum}{foundroom};
			#echo {***** Found $searchstring in room $foundroom****}
		};
	};
	#list {critter_array}{find}{%*(%d\%)}{found_index};
	#if {$found_index > 0}{
		#list {critter_array}{del}{$found_index};
	};
	#if {"$tkstr" != "none" && "$guild" == "changeling" && "$area" == "Changeling Biome"}{
		#format {timestamp} {%t} {[<268>%H<088>:<268>%M<088>] };
		#format {dbtimestamp} {%t} {[%Y:%m:%d %H:%M:%S]};
		update_chat ${timestamp}<178>Biome<088>: $tkstr;
		db_submit_chat ${dbtimestamp}Biome: $tkstr;
	};
	#if {"${critter[blacklist]}" != ""}{
		#loop {1}{$blacklist_size}{critter_count}{
			#list {critter_array}{find}{%*${critter[blacklist][${critter_count}]}%*}{found_index};
			#if {$found_index > 0}{
				#list {critter_array}{del}{$found_index};
			};
		};
	};
	#if {"${global[blacklist]}" != ""}{
		#loop {1}{$global_blacklist_size}{critter_count}{
			#list {critter_array}{find}{%*${global[blacklist][${critter_count}]}%*}{found_index};
			#if {$found_index > 0}{
				#list {critter_array}{del}{$found_index};
			};
		};
	};
	#if {"${critter[whitelist]}" != ""}{
		#loop {1}{$whitelist_size}{critter_count}{
			#list {critter_array}{size}{critter_room};
			#if {$critter_room > 0}{
				#list {critter_array}{find}{%*${critter[whitelist][${critter_count}]}%*}{found_index};
				#if {$found_index != 1}{
					#list {critter_array}{del}{1};
				};
			};
		};
	};
	#list {critter_array}{size}{critter_room};
};

#var {searchstring}{}
#act {^=M= %*} {
	#format {tkstr}{%l}{%1};
	#replace {tkstr}{.}{};
	#replace {tkstr}{ !attacking you!}{};
	#replace {tkstr}{%s[%d\%]%s}{};
	#replace {tkstr}{%s[%w]%s}{};
	#replace {tkstr}{ attacking you}{};
	#replace {tkstr}{ <?>}{};
	#replace {tkstr}{ <!>}{};
	#replace {tkstr}{!}{};
	#regex {$tkstr}{%* \\x7b%d\\x7d}{
		#loop {1}{&2}{count}{
			process_critter &1;
		};
	}{
		process_critter {$tkstr};
	};
	#var {tkstr}{${critter_array[${critter_room}]}};
	#regex {$tkstr}{%* %w$}{
		#var {tkstr}{&2};
	};
	#regex {$tkstr}{sentry}{
		#var {tkstr}{sentry};
	};
	#regex {$tkstr}{soldier}{
		#var {tkstr}{soldier};
	};
	#regex {$tkstr}{assembler}{
		#var {tkstr}{assembler};
	};
	#regex {$tkstr}{guardian}{
		#var {tkstr}{guardian};
	};
	#var {kstr}{$tkstr};
	#if {"$area" == "Changeling Biome" && $domove2 == 1}{
		bscan;
	};
}{9};

#act {^=P= %*} {
        #math {player_room}{$player_room + 1};
}


#act {^=I= %*} {
        #format {item}{%l}{%1};
        #if {$player_room == 0}{
                #regex {$item}{gold coins}{!divvy coins};
        };
        #loop {1}{$all_area_items}{count}{
                #regex {$item}{$area_items[$count]}{
                        #list {item_list}{add}{$area_items[$count]};
                        #list {item_list}{size}{total_items};
                };
        };	
	#if {$player_room == 0}{
		#regex {$item}{gold coins}{!divvy coins};
	};
}

#alias {dirfunction}{
        #if {"%1" == "s"}{#var reversedir n;s};
        #if {"%1" == "e"}{#var reversedir w;e};
        #if {"%1" == "w"}{#var reversedir e;w};
        #if {"%1" == "n"}{#var reversedir s;n};
        #if {"%1" == "sw"}{#var reversedir ne;sw};
        #if {"%1" == "se"}{#var reversedir nw;se};
        #if {"%1" == "nw"}{#var reversedir se;nw};
        #if {"%1" == "ne"}{#var reversedir sw;ne};
}

#var {unexplored_rooms}{0};

#alias {go_unexplored}{
	#var {closest_unexplored}{1};
	#line quiet #map find ${unexplored[1]};
	#line quiet #path {get}{length}{shortest_distance};
	#list {unexplored}{size}{unexplored_rooms};
	#loop {1}{$unexplored_rooms}{count}{
		#line quiet #map find {$unexplored[$count]};
		#line quiet #path {get}{length}{distance};
		#if {$distance < $shortest_distance}{
			#var {closest_unexplored}{$count};
			#var {shortest_distance}{$distance};
		};
	};
	make_killpath ${unexplored[${closest_unexplored}]};
};

#alias ki {
	#if {$domove2 == 1}{
		#var domove2 0;
		#var player_room 0;
		#var critter_room 0
	}{
		#var critter_room 0;
		#var player_room 0;
		#var domove2 1;
		#switch {$stepignore}{
			#case {0}{
				#if {$room_index <= $area_size}{
					make_killpath {${roomlist[${room_index}]}};
				};
				#var stepper2 1;
			};
			#case {1}{
				#var stepper2 0;
				#map {flag}{static}{off};
			};
			#case {2}{
				#var stepper2 0;
				#map {flag}{static}{off};
			};
			#case {3}{
				#if {$unexplored_rooms > 0}{
					go_unexplored;
				};
				#map {flag}{static}{off};
				#var stepper2 0;
			};
		};
		#if {"$guild" == "angel" && $my[desecrate] == 1}{
			!cease;
		};
		glance;
	};
}

#alias {gather_items}{
	#if {$total_items > 0}{
		#loop {1}{$total_items}{count}{
		!get ${item_list[$count]};
		#if {"$area" == "csewers" && "$guild" == "mage"}{
			id ${item_list[$count]};
		};
		pck ${item_list[$count]};
	};
		#list {item_list}{clear};
		#unvar item_list;
	};
}

#alias {autoq}{
	#if {$autoqueue == 1}{
		#echo {No longer queueing};
		#var autoqueue 0;
		show_area_selector;
	}{
		#echo {Queueing};
		#var autoqueue 1;
		show_area_selector;
	};
};

#alias {next_area_function}{
	#if {${player_room} == 0}{ 
		#if {${autogather} == 1}{
			gather_items;
		};
		#if {${critter_room} > 0}{
				#var domove2 0;
				#if {$autokill == 1}{
					kk;
				};
		}{
			go ${areaselector[roomnote][${targetarea}]};
			#delay {0.15}{rating};
		};
	}{
		go ${areaselector[roomnote][${targetarea}]};
		#delay {0.15}{rating};
	};
};


#alias {step_function}{
	#if {$debug_stepper == 1}{
		#echo {using Stepper mode $stepper2 - Queeuing is $autoqueue - Domove is $domove2 - do_queue is $do_queue2};
		#echo {Room index is $room_index - Path index is $path_index};
		#echo {There are $critter_room critters in the room};
		#echo {There are $player_room players in the room};
	};
	#if {${stepper2} == 1}{
		${kill_path2[${path_index}]};
		#math {path_index}{$path_index + 1};
		#if {${path_index} > ${path_size}}{
			#math {room_index}{${room_index} + 1};
			#math {tmp_size}{$area_size + 1};
			#if {$room_index > $tmp_size}{
				#var {room_index}{1};
				#math {targetarea}{${areaselector[current]} + 1};
				#if {${targetarea} > ${queue_size}} {
					#if {$bot && !$autoqueue} {
						.stop;
						go cot;
					} {
						#var {targetarea}{1};
						#var {do_queue2}{1};
						#delay {0.15}{next_area_function};
					}; 
				} {
					#var {do_queue2}{1};
					#delay {0.15}{next_area_function};
				};
			}{
				#if {$room_index <= $area_size}{
					make_killpath {${roomlist[${room_index}]}};
				};
			};
		};
	}{
		#switch {$stepignore}{
			#case {1}{
				#nop {Manual path};
				#math {room_num}{$room_num + 1};
				#if {$room_num > $max_room}{
					#math {targetarea}{$my[areaselector][current] + 1};
					#if {$targetarea > 6} {		
						#if {$bot && !$autoqueue} {
							.stop;
							go cot;
						} {
							#var {targetarea}{1};
							#delay {0.15}{next_area_function};
						}
					};		
				}{
					${kill_path[${room_num}]};
				};
			};
			#case {2}{
				#nop {Wandering};
				dirfunction $desired_dir;
			};
			#case {3}{
				#nop {Magic Mapper};
				#if {$unexplored_rooms > 0}{
					#if {"${kill_path2[${path_index}]}" == ""}{
						go_unexplored;
					};
					${kill_path2[${path_index}]};
					#math {path_index}{$path_index + 1};
					#if {${path_index} > ${path_size}}{
						#list {unexplored}{find}{$roomvnum}{my_result};
						#if {$my_result > 0}{
							#list {unexplored}{del}{${my_result}};
						};
						go_unexplored;
					};
				}{
					#echo {No Unexplored rooms, Wandering Instead};
					dirfunction $desired_dir;
				};
			};
		};
	};
};

#alias kill-loop {
	#if {${player_room} == 0}{ 
		#if {${autogather} == 1}{
			gather_items;
		};
		#if {${critter_room} > 0}{
				#var domove2 0;
				#if {$autokill == 1}{
					kk;
				};
		}{
			step_function;
		};
	}{
		step_function;
	};
}

#alias dir_selection {
	#var good_dir 0;
	#var max_rand 0;
	#if {$domove2 == 1}{
		#if {$room_exits == 1}{
			#var desired_dir ${room_dirs[1]};
		}{
			#if {$room_exits == 2}{
				#if {$upexit == 1}{
					#var desired_dir ${room_dirs[2]};
					#var good_dir 1;
				};
				#if {$upexit == 2}{
					#var desired_dir ${room_dirs[1]};
					#var good_dir 1;
				};
			};
			#while {$good_dir == 0 && $max_rand < 100}{
				#math {max_rand}{$max_rand + 1};
				#math {desired_num}{1 d $room_exits};
				#if {$desired_num != $upexit}{
					#if {$desired_num != $reverse_dir}{
						#var {desired_dir}{${room_dirs[$desired_num]}};
						#var good_dir 1;
					};
				};
			};
			#if {"$room_short_desc" == "The east gate of Lut Gholein"}{
				#var {desired_dir}{e};
				#var good_dir 1;
			};
			#if {"$room_short_desc" == "The town square"}{
				#var {desired_dir}{e};
				#var good_dir 1;
			};
		};
		#if {$findexit == 1}{
			kill-loop;
		}{
			#if {"$mapping" == "on"}{
				#delay {0.15}{kill-loop};
			}{
				#delay {0.05}{kill-loop};
			};
		};
	};
}

#class {killer}{close}
